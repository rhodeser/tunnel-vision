; -----------------------------------------------------------------
; Final Project - Tunnel Vision
; Erik Rhodes
; Bhavana Dhulipala
; Rohan Deshpande
; Nikhil Patil
; Version:	3.1
; Author:	Roy Kravitz
; Date:		03-Jan-201;
; Revision History
; ================
; Code modified from Rojobot world emulator designed by Roy Kravitz
; Description:
; ============
; This program demonstrate the Rojobot world emulator.  It is modelled after
; the the Verilog Rojobot implemented in the Getting Started application only this demo is based
; on the full Rojobot emulator (as implemented in bot.v instead of the simplified
; Rojobot model used in the Getting Started project
;
; The demo uses the 4 pushbuttons to control the Rojobot as follows:
;	btn_left	- Left Motor forward
; 	btn_up		- Left Motor reverse
;	btn_right	- Right Motor forward
;	btn_down	- Right Motor reverse
; If neither of the two buttons that control each motor is pushed, then the motor is stopped. 
; If both of the two buttons that control each motor are pushed, the actions cancel each other
; leaving the motor stopped.
;
; The demo has two display modes.  When switch[0] is 'off' the program displays the
; location of the Rojobot in its "world" on the 4 digits of the 7-segment display. 
; The leftmost two digits (digit 3 and digit 2) display the x-coordinate in Hex. 
; The rightmost two digits (digit 1 and digit 0) display the y-coordinate in Hex.
;
; When switch[0] is 'on' the program uses the 4 7-segment display digits as follows
; 	digit[3]	Indicates the Rojobot movement (Stopped, Forward, Reverse, etc.) in Hex.  See the
; 				BotSim specification for the encoding (page 7)
;	digits[2:0]	Indicates the Rojobot's heading in degrees.	
	
; The sensors are displayed on the LEDs in both display modes.
; Decimal point 0 toggles on and off every interrupt (~every 100 msec)
;
; NOTE:  NOT ALL THE CODE IN THIS EXAMPLE IS USED.  THE EXAMPLE WAS CREATED TO GIVE YOU, THE
; STUDENT, AN EXAMPLE OF HOW TO CONTROL THE ROJOBOT AND S3E PERIPHERALS FROM AN EMBEDDED PICOBLAZE
; CPU. YOU MAY (OR NOT) FIND SOME OF THIS CODE APPLICABLE TO YOUR OTHER PROJECTS
; -----------------------------------------------------------------	

; ============================================
; === Register Names                       ===
; === s6 - s0 registers are not dedicated  ===
; === and keep their default names         ===
; ============================================
NAMEREG		sF,		LocX			; rojobot location - x coordinate
NAMEREG		sE,		LocY			; rojobot location - y coordinate
NAMEREG		sD,		Sensor			; rojobot sensor values
NAMEREG		sC,		Colinf			; rojobot movement and orientation values
					;renamed from Botinf
NAMEREG		sB,		MVst			; state variable for movement indicator
NAMEREG		sA,		Dig3			; 7-segment display digit 3
NAMEREG		s9,		Dig2			; 7-segment display digit 2
NAMEREG		s8,		Dig1			; 7-segment display digit 1
NAMEREG		s7,		Dig0			; 7-segment display digit 0



; ======================
; === Port Addresses ===
; ======================

; Nexys 3 board interface ports
;  Port Addresses
CONSTANT	PA_PBTNS,		00		; (i) pushbuttons and rotary encoder direction and pushbutton
CONSTANT	PA_SLSWTCH,		01		; (i) slide switches
CONSTANT	PA_LEDS,		02		; (o) LEDs
CONSTANT	PA_DIG3,		03		; (o) digit 3 PA address
CONSTANT	PA_DIG2,		04		; (o) digit 2 PA address
CONSTANT	PA_DIG1,		05		; (o) digit 1 PA address
CONSTANT	PA_DIG0,		06		; (o) digit 0 PA address
CONSTANT	PA_DP,			07		; (o) decimal points PA address
CONSTANT	PA_RSVD,		08		; (o) *RESERVED*


; rojobot interface registers
CONSTANT	PA_MOTCTL_IN,	09		; (o) Rojobot motor control output from system
CONSTANT	PA_LOCX,		0A		; (i) X coordinate of rojobot location
CONSTANT	PA_LOCY,		0B		; (i))Y coordinate of rojobot location
CONSTANT	PA_BOTINFO,		0C		; (i) Rojobot info register
CONSTANT	PA_COLLINFO,	02		
CONSTANT	PA_SENSORS,		0D		; (i) Sensor register
CONSTANT	PA_LMDIST,		0E		; (i) Rojobot left motor distance register
CONSTANT	PA_RMDIST,		0F		; (i) Rojobot right motor distance register


; =====================================
; === Register bit mappings (masks) ===
; =====================================
	
;  bit masks for pushbuttons and switches for seven segment emulator
CONSTANT	MSK_ALLBTNS,	1F		; Buttons are in bits[5:0]
CONSTANT	MSK_PBTNS,		0F		; Mask for 4 buttons to display on LED
CONSTANT	MSK_BTN_CENTER,	10		; Pushbutton Center is bit 4
CONSTANT	MSK_BTN_LEFT,	08		; Pushbutton Left is bit 3
CONSTANT	MSK_BTN_UP,		04		; Pushbutton Up is bit 2
CONSTANT	MSK_BTN_RIGHT,	02		; Pushbutton Right is bit 1
CONSTANT	MSK_BTN_DOWN,	01		; Pusbhbutton Down is bit 0
CONSTANT	MSK_BTN_NONE,	1F

CONSTANT	MSK_ALLSW,		FF		; Slide switches are in bits[7:0]
CONSTANT	MSK_SW7,		80		; Slide switch 7 is bit 7
CONSTANT	MSK_SW6,		40		; Slide switch 6 is bit 6
CONSTANT	MSK_SW5,		20		; Slide switch 5 is bit 5
CONSTANT	MSK_SW4,		10		; Slide switch 4 is bit 4
CONSTANT	MSK_SW3,		08		; Slide switch 3 is bit 3
CONSTANT	MSK_SW2,		04		; Slide switch 2 is bit 2
CONSTANT	MSK_SW1,		02		; Slide switch 1 is bit 1
CONSTANT	MSK_SW0,		01		; Slide switch 0 is bit 0

; -----------------------TUNNEL VISION-------------------------
; =============================================================
; === Bit mappings masks used for game_info register output ===
; =============================================================
; -----------------------TUNNEL VISION-------------------------

;Values for masking port # to create correct game_info output
CONSTANT	MSK_SPRITE,		03
CONSTANT	MSK_GAME_STAT,          80	
CONSTANT	MSK_LEVEL,		18
CONSTANT	MSK_ICON,		60
CONSTANT	MSK_BKGRND,		80
CONSTANT	MSK_RIGHT,		00
CONSTANT	MSK_CENTER,		01
CONSTANT	MSK_LEFT,		10	

;values to index the number of options player can select
CONSTANT	MSK_COLLISION,	01
CONSTANT	MSK_NUM_VEH,	03
CONSTANT	MSK_NUM_LEV,	01
CONSTANT	MSK_NUM_BKGRND,	03

CONSTANT	STATE,			28
CONSTANT	SP_SCORE,		29
CONSTANT	SP_SPRITE_LOC,	31
CONSTANT	SP_BTN,			34
CONSTANT	SP_CNT_0,		35		;score counters
CONSTANT	SP_CNT_1,		36
CONSTANT	SP_CNT_2,		37
CONSTANT	SP_CNT_3,		38
CONSTANT	SP_BTN2,		39
CONSTANT	SP_NUM_VEH,		40
CONSTANT	SP_NUM_LEV,		41
CONSTANT	SP_NUM_BKGRND,	42
CONSTANT	SP_GAME_INFO,	43
CONSTANT	SP_SWITCH_VAL,	44

CONSTANT	PAUSED_STATE,	00
CONSTANT	ACTIVE_STATE,	01

CONSTANT	PA_GAME_INFO,	09			;port to interface sending information to map

;CONSTANT	GameStatus		?		;incoming bit for collision information



; bit mask for LEDs
CONSTANT	MSK_LEDS,		FF		; There are 8 LEDs on the Nexys 3


; bit mask for display character codes and decimal points
CONSTANT	MSK_CCODE,		1F		; Character codes are in lower 5 bits
CONSTANT	MSK_DECPTS,		0F		; Decimal points are in bits 3 to 0
CONSTANT	MSK_HEXDIGIT,	0F		; Hex digits only take 4 bits
CONSTANT	MSK_DECDIGIT,	09

; nibble masks
CONSTANT	MSKLOWNIB,		0F		; Mask out high nibble of byte
CONSTANT	MSKHIGHNIB,		F0		; Mask out low nibble of byte
CONSTANT	INVLOWNIB,		0F		; Invert low nibble of byte


; =============================
; === Useful Data Constants ===
; =============================

;  Constants for True and False and Null
CONSTANT	FALSE,			00
CONSTANT	TRUE,			01
CONSTANT	NULL,			00

; Character code table for special characters
; Decimal digits 0 to 15 display '0'to 'F'
CONSTANT	CC_BASE,		10		; Base value for special characters
CONSTANT	CC_SEGBASE,		10		; Base value for segment display special characters
									;				 abcdefg
CONSTANT	CC_SEGA,		10		; Segment A		[1000000]
CONSTANT	CC_SEGB,		11		; Segment B		[0100000]
CONSTANT	CC_SEGC,		12		; Segment C		[0010000]
CONSTANT	CC_SEGD,		13		; Segment D		[0001000]
CONSTANT	CC_SEGE,		14		; Segment E		[0000100]
CONSTANT	CC_SEGF,		15		; Segment F		[0000010]
CONSTANT	CC_SEGG,		16		; Segment G		[0000001]
CONSTANT	CC_DOT,			17		; Dot (period)
CONSTANT	CC_UCH,			18		; Upper Case H
CONSTANT	CC_UCL,			19		; Upper Case L
CONSTANT	CC_UCR,			1A		; Upper Case R
CONSTANT	CC_LCL,			1B		; Lower Case L
CONSTANT	CC_LCR,			1C		; Lower Case R
CONSTANT	CC_SPACE1,		1D		; Space (blank)
CONSTANT	CC_SPACE2,		1E		; Space (blank)
CONSTANT	CC_SPACE,		1F		; Space (blank)


; ======================
; === BotInfo values ===
; ======================
CONSTANT	OR_N,			00		; Orientation is North
CONSTANT	OR_NE,			01		; Orientation is Northeast
CONSTANT	OR_E,			02		; Orientation is East
CONSTANT	OR_SE,			03		; Orientation is Southeast
CONSTANT	OR_S,			04		; Orientation is South
CONSTANT	OR_SW,			05		; Orientation is Southwest
CONSTANT	OR_W,			06		; Orientation is West
CONSTANT	OR_NW,			07		; Orientation is Northwest

CONSTANT	MV_STOP,		00		; Movement is stopped
CONSTANT	MV_FWD,			04		; Movement is forward
CONSTANT	MV_REV,			08		; Movement is reverse
CONSTANT	MV_SLT,			0C		; Movement is slow left turn
CONSTANT	MV_FLT,			0D		; Movement is fast left turn
CONSTANT	MV_SRT,			0E		; Movement is slow right turn
CONSTANT	MV_FRT,			0F		; Movement is fast right turn
									; Next 2 contants assume field is in low nibble
CONSTANT	MSKMVMT,	0F			; Mask out all but movement bits
CONSTANT	MSKORIENT,	07			; Mask out all but orientation bits



; =================================
; === Scratch Pad RAM Variables ===
; =================================

; Pushbutton translation lookup table.  Converts pushbutton combos
; to Motor Control input register format [lmspd[2:0],lmdir,rmspd[2:0],rmdir]
CONSTANT	SP_BTNBASE,	00			; table is based at 0x00
									;								[b3,b2,b1,b0]=[lf,lr,rf,rr]
CONSTANT	SP_LSRS,		00		; left motor off, right motor off 				[0000]
CONSTANT	SP_LORR,		02		; left motor off, right motor reverse			[0001]
CONSTANT	SP_LSRF,		03		; left motor off, right motor forward			[0010]
CONSTANT	SP_LSRFR,		00		; left motor off, right motor fwd & rev = off	[0011]
CONSTANT	SP_LRRS,		20		; left motor reverse, right motor off			[0100]
CONSTANT	SP_LRRR,		22		; left motor reverse, right motor reverse		[0101]
CONSTANT	SP_LRRF,		23		; left motor reverse, right motor forward		[0110]
CONSTANT	SP_LRRFR,		20		; left motor rev, right motor fwd & rev = off	[0111]
CONSTANT	SP_LFRS,		30		; left motor forward, right motor off 			[1000]
CONSTANT	SP_LFRR,		32		; left motor forward, right motor reverse		[1001]
CONSTANT	SP_LFRF,		33		; left motor forward, right motor forward		[1010]
CONSTANT	SP_LFRFR,		30		; left motor fwd, right motor fwd & rev = off	[1011]
CONSTANT	SP_LFRRS,		00		; left motor fwd & rev = off, right motor off	[1100]
CONSTANT	SP_LFRRR,		02		; left motor fwd & rev = off, right motor rev	[1101]
CONSTANT	SP_LFRRF,		03		; left motor fwd & rev = off, right motor fwd	[1110]
CONSTANT	SP_LFRRFR,		00		; left  and right motor fwd & rev = off			[1111]


; Movement display lookup table.  Converts movement from BotInfo register to
; the character code to display.  Not very dense but we have the room in the SP RAM and 
; it saves building a switch statement into the code.
CONSTANT	SP_MVMTBASE,	10			; table is based at 0x10

CONSTANT	SP_MVMT0,		18		; Stopped - display upper case H
CONSTANT	SP_MVMT1,		17		; Reserved - display dot to indicate error
CONSTANT	SP_MVMT2,		17		; Reserved - display dot to indicate error
CONSTANT	SP_MVMT3,		17		; Reserved - display dot to indicate error
CONSTANT	SP_MVMT4,		0F		; Forward - display upper case F
CONSTANT	SP_MVMT5,		17		; Reserved - display dot to indicate error
CONSTANT	SP_MVMT6,		17		; Reserved - display dot to indicate error
CONSTANT	SP_MVMT7,		17		; Reserved - display dot to indicate error
CONSTANT	SP_MVMT8,		0B		; Reverse (Backward) - display lower case B
CONSTANT	SP_MVMT9,		17		; Reserved - display dot to indicate error
CONSTANT	SP_MVMTA,		17		; Reserved - display dot to indicate error
CONSTANT	SP_MVMTB,		17		; Reserved - display dot to indicate error
CONSTANT	SP_MVMTC,		19		; Slow left turn - display upper case L
CONSTANT	SP_MVMTD,		1B		; Fast left turn - display lower case L
CONSTANT	SP_MVMTE,		1A		; Slow right turn - display upper case R
CONSTANT	SP_MVMTF,		1C		; Fast right turn - display lower case R


; ==============================
; === Storage for old values ===
; ==============================
CONSTANT	SP_SEM,			20		; Semaphore between isr and main loop
CONSTANT	SP_TEMP1,		21		; Temp storage.  Used by ISR
CONSTANT	SP_TEMP2,		22		;
CONSTANT	SP_LMDIST,		23		; Storage for left and right motor distance counters
CONSTANT	SP_RMDIST,		24		;
CONSTANT	SP_OLDMVMT,		25		; Old movement value 
CONSTANT	SP_OLDHDG,		26		; Old heading value
CONSTANT	SP_OLDDP,		27		; Old decimal points


; ===============
; === main()  ===
; ===============

ADDRESS	000
main:			CALL	init_btnluptbl				; initialize button to MotCtl lookup table
				CALL	init_mvmttbl				; initialize movement to character code lookup table
				LOAD	s1,		00					; clear the semaphore
				STORE	s1,		SP_SEM				;
				LOAD	s1,		00					; 
				STORE	s1,		SP_CNT_0			; clear counters
				LOAD	s1,		00					; 
				STORE	s1,		SP_CNT_1			; clear counters
				LOAD	s1,		00					; 
				STORE	s1,		SP_CNT_2			; clear counters
				LOAD	s1,		00					; 
				STORE	s1,		SP_CNT_3			; clear counters	
				LOAD	s1,		00
				STORE	s1,		SP_GAME_INFO
				LOAD	s1,		00
				STORE	s1,		STATE
				
				LOAD	s1,		00
				STORE	s1,		MSK_NUM_VEH
				STORE	s1,		MSK_NUM_LEV	
				STORE	s1,		MSK_NUM_BKGRND
				STORE	s1,		SP_BTN2		
				STORE	s1,		SP_NUM_VEH		
				STORE	s1,		SP_NUM_LEV		
				STORE	s1,		SP_NUM_BKGRND
				
				LOAD	s1,		00					; turn off all of the decimal points
				;CALL	SS_wrdpts					;
				STORE	s1,		SP_OLDDP			; and save the value	
				ENABLE	INTERRUPT					; get the ball rolling
									

; ==================
; === Main  Loop ===
; ==================
													;	while(1) {  // main loop is an infinite loop
main_L0:		FETCH	s6,		SP_SEM				;		while (SP_SEMA == 0)  {}   // loop until isr updates rojobot registers
				COMPARE	s6,		00					;
				JUMP	Z,		main_L0				;
													; 
				CALL	DEB_rdsw					;		s0 = switches
				TEST	s0,		MSK_SW0				;		if (sw[0] == 0)   // display the Rojobot location
				JUMP	NZ,		main_L1				; -- Z = 0 says switch is 'on'
				
				;if switch is on...? then display_opts and not score.  
				;note - should be display opts, debugging now
				;CALL	display_score
				
				;The point of this block is to keep the game in a paused state initially.  The player should be able to 
				;select options of vehicle and background.  when ready, changing the switch will start the game.
				
				;WHAT I NEED TO DO:  if switch == 1, start game.  If not, do the options/location changes stuff
				;moved start_game to main_L1?  
				FETCH	s2,		SP_SWITCH_VAL		;if we have switch == 0, which should mean options.
				LOAD	s3,		00
				COMPARE	s2,		s3
				JUMP	NZ,		main_L1							;if we haven't started the game, ok to allow options
				CALL	display_opts				;Doesn't currently display differences, will update game_info though
				;if this doesn't work, remove these 5 lines and rename next_step to start game
				CALL	wr_alldigits
				CALL	DEB_rdbtns				;get debounced values
				AND		s0,		MSK_BTN_DOWN				;mask with down button
				COMPARE s0,		MSK_BTN_DOWN
				JUMP	main_L2
				
				;CALL	Z, start_game
				
				;JUMP	main_L2						;
													;		else {  // display movement and heading

main_L1:		;FETCH	s2,		STATE
				;COMPARE s2,		PAUSED_STATE
				;JUMP 	Z,		main_L2				;if we're paused, don't display the score yet?
				CALL	start_game
                                LOAD    s2,       FC    ;clear game_info
                                FETCH   s3,       SP_GAME_INFO
                                AND     s3,       s2                ;mask sprite bits off for now
                                STORE   s3,       SP_GAME_INFO
				CALL	display_score				;			Dig[3] = next movement
													;		}
main_L2:		CALL	wr_alldigits				;		write all of the digits to the display
				LOAD	s1,		Sensor				;		update LEDs with new sensor information
				;CALL	LED_wrleds					;															;
				;CALL	start_game					;		moved to L1 for now
				LOAD	s2,		SP_GAME_INFO
				;OUTPUT	s2,		PA_GAME_INFO		;PORT 9?
				FETCH	s6,		SP_SEM
				SUB		s6,		01					;		decrement semaphore
				STORE	s6,		SP_SEM				;
				JUMP	main_L0						;	} // end - main while loop	
				
													
								
			
;**************************************************************************************
; Support functions
;**************************************************************************************	

; ===============================================================================
; === wr_alldigits() - Writes all 4 display digits from the global registers  ===
; === Registers used s0,s1,s2, Dig0, Dig1, Dig2, Dig3                         ===
; ===============================================================================

wr_alldigits:	LOAD	s2,			00				; point at digit 0
				LOAD	s1,			Dig0			; and write it to display
				CALL	SS_wrdigx					;
				LOAD	s2,			01				; point at digit 1
				LOAD	s1,			Dig1			; and write it to display
				CALL	SS_wrdigx					;
				LOAD	s2,			02				; point at digit 2
				LOAD	s1,			Dig2			; and write it to display
				CALL	SS_wrdigx					;
				LOAD	s2,			03				; point at digit 3
				LOAD	s1,			Dig3			; and write it to the display
				CALL	SS_wrdigx					;
				RETURN
				
					
;*******
; Functions to convert pushbutton presses to Motor Control input
;*******				

; ===============================================================================
; === init_btnluptbl() - initialize button translation lookup table in SP RAM ===
; === Registers affected: s0, s1                                              ===
; ===============================================================================
init_btnluptbl:	LOAD	s0,		SP_BTNBASE			; s0 gets base of button translation lookup table
				LOAD	s1,		SP_LSRS				; s1 gets values for 0x00								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_LORR				; s1 gets values for 0x01								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index				
				LOAD	s1,		SP_LSRF				; s1 gets values for 0x02								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_LSRFR			; s1 gets values for 0x03								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index	
				LOAD	s1,		SP_LRRS				; s1 gets values for 0x04								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_LRRR				; s1 gets values for 0x05							
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index				
				LOAD	s1,		SP_LRRF				; s1 gets values for 0x06								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_LRRFR			; s1 gets values for 0x07								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_LFRS				; s1 gets values for 0x08								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_LFRR				; s1 gets values for 0x09								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index				
				LOAD	s1,		SP_LFRF				; s1 gets values for 0x0A								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_LFRFR			; s1 gets values for 0x0B								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index	
				LOAD	s1,		SP_LFRRS			; s1 gets values for 0x0C								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_LFRRR			; s1 gets values for 0x0D							
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index				
				LOAD	s1,		SP_LFRRF			; s1 gets values for 0x0E								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_LFRRFR			; s1 gets values for 0x0F								
				STORE	s1,		(s0)				; store the entry in the table
				RETURN								; done...at last			
				

; =============================================================================
; === btn2mot() - Button to MotCtl conversion function                      ===
; === Registers affected: s1, s2                                            ===
; === s0 contains the button value to convert.                              ===
; === Result (Motor Control register value) is returned in s1               ===
; === s0 (Button value) is not changed                                      ===
; =============================================================================
btn2mot:		LOAD	s2,		SP_BTNBASE			; s2 gets base of button conversion table
				LOAD	s1,		s0					; mask out upper nibble of buttons
				AND		s1,		MSKLOWNIB			; 
				ADD		s2,		s1					; s2 = Base + offset into table		
				FETCH	s1,		(s2)				; and fetch the entry
				RETURN															

				
; ===============================================================================
; === init_mvmttbl() - initialize movement translation lookup table in SP RAM ===
; === Registers affected: s0, s1                                              ===
; ===============================================================================
init_mvmttbl:	LOAD	s0,		SP_MVMTBASE			; s0 gets base of movement translation lookup table
				LOAD	s1,		SP_MVMT0			; s1 gets values for 0x00								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_MVMT1			; s1 gets values for 0x01								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index				
				LOAD	s1,		SP_MVMT2			; s1 gets values for 0x02								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_MVMT3			; s1 gets values for 0x03								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index	
				LOAD	s1,		SP_MVMT4			; s1 gets values for 0x04								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_MVMT5			; s1 gets values for 0x05							
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index				
				LOAD	s1,		SP_MVMT6			; s1 gets values for 0x06								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_MVMT7			; s1 gets values for 0x07								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_MVMT8			; s1 gets values for 0x08								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_MVMT9			; s1 gets values for 0x09								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index				
				LOAD	s1,		SP_MVMTA			; s1 gets values for 0x0A								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_MVMTB			; s1 gets values for 0x0B								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index	
				LOAD	s1,		SP_MVMTC			; s1 gets values for 0x0C								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_MVMTD			; s1 gets values for 0x0D							
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index				
				LOAD	s1,		SP_MVMTE			; s1 gets values for 0x0E								
				STORE	s1,		(s0)				; store the entry in the table
				ADD		s0,		01					; increment the table index
				LOAD	s1,		SP_MVMTF			; s1 gets values for 0x0F								
				STORE	s1,		(s0)				; store the entry in the table
				RETURN								; done...at last			
				

; =============================================================================
; === mvmt2cc() - movement to character code conversion function            ===
; === Registers affected: s1, s2                                            ===
; === s0 contains the movment value to convert.                             ===
; === Result (character code to display) is returned in s1                  ===
; === s0 (movement) is not changed                                          ===
; =============================================================================
mvmt2cc:		LOAD	s2,		SP_MVMTBASE			; s2 gets base of movment conversion table
				LOAD	s1,		s0					; mask out upper nibble of movment
				AND		s1,		MSKLOWNIB			; 
				ADD		s2,		s1					; s2 = Base + offset into table		
				FETCH	s1,		(s2)				; and fetch the entry
				RETURN															

				
;#########################################
; Modify this function for Project 2 #####	
;#########################################			
			

; ==============================================================================
; === next_step() - Tells rojobot what to do next                            ===    
; === Registers affected: s0, s1                                             ===
; === This version reads the pushbuttons, calculates the new Motor Control   ===
; === register value and then writes MotCtl so Rojobot knows what to do      ===  
; ==============================================================================
	
	;=========================================================================
;;;;;;;	---------------------------		OLD STUFF	----------------------------
;				CALL	DEB_rdbtns					; Read the pushbuttons. buttons returned in s0
;				CALL	btn2mot						; and calculate new MotCtl - returned in s1
;				OUTPUT	s1,		PA_MOTCTL_IN		; tell Rojobot what to do
;				RETURN	
;;;;;;;=========================================================================
start_game:					
				CALL	chk_collision				; First see if the game is over
				RETURN								; If there was a collision, don't do any more

				
chk_btns:		CALL	DEB_rdbtns					; Read the pushbuttons. buttons returned in s0
				LOAD	s1,	s0						;copy and store value
				STORE	s1,	SP_BTN
				CALL	chk_up_btn					; see if user wants to pause
				RETURN								; if so, return to main
				
;TODO			
				;Will no buttons reset game_info to not move vehicle previous direction?
				;RESET logic doesn't work that well...?
				;don't need to check switch 1 unless "paused" or really, at the beginning.  count have if counter = 0
				;display_opts will just overwrite the Dig values? 
				;main logic so far - will not keep score when switched, and always calls..maybe.
				;update main so doesn't output old stuff but outputs new stuff, and goes based off switch
				;is 09 correct port for PA_GAME_INF0?
				;create sys_update interface to interrupt and load GameStatus value 
				;MAKE SURE REGISTERS AREN'T GETTING CLOBBERED
				;updating game_info, do offset of base register ?
				;WHAT HAPPENS IF GAME OVER AND PRESS RESUME?
				;OUTPUT GAME_INFO REGISTER AT THE END? 
				;write a function to change game_info bits
				;write function to output game_info
				;possibly put in main
				;should store all outputs in SP, then call function to output all in main (like wr_alldigits).
				;or if 1, and with converse if 0.  any shortcuts here?
				;CREATE OUTPUT 	GAME_INFO, ...? OR IN MAIN?
				;Sprite: 00 = straight, 01 = right, 10 = left, 11 = ?  straight?
				;game status:  0 = paused, 1 = active
				
				  
				
				;PROBLEMS:
				; right btn not correctly decrementing output.  down goes b/w 1 and 2. left goes 2-1-0 ?. 
				;starting state isn't PAUSED.  should clear 
				;switch shouldn't start game, it should wait till user presses enter
active:			
				;manages functions when state is active
				;updates state
				;these need to modify game_info register as well
				LOAD	s4,		01
				STORE	s4,		SP_SWITCH_VAL		;once we're in an active state, we can't use switch
				CALL	update_score
				;CALL 	display_score
				LOAD 	s3,		ACTIVE_STATE
				STORE	s3,		STATE
				;UPDate game info for state as well?
				;LOAD	s0,		00
				;OUTPUT	s0,		PA_LEDS				;clear bits? probably not needed
				FETCH	s3,		SP_GAME_INFO
				LOAD 	s4,		MSK_GAME_STAT
				OR		s3,		s4				;update status to be active
				STORE	s3,		SP_GAME_INFO
				RETURN
				
update_info:			;puts new information to game_info output to map.v.  Doesn't output 
				;TODO: INITIALIZE TO 0

														;
chk_collision:
				;checks for collision, if so, updates state, outputs led pattern, outputs 
				;game_info register with paused state info
	;UNCOMMENT HERE			;LOAD	s2,		Colinf			;needs to get this from map.v 
				;DUMMY VALUE below, change for later
				LOAD	s2,		00
				AND		s2,		MSK_COLLISION		;see if we have a collision
				LOAD	s3,		MSK_COLLISION
				COMPARE s2,		s3				
				JUMP 	NZ,		chk_btns			;if no collision, move on to checking buttons
				LOAD 	s3,		PAUSED_STATE
				STORE	s3,		STATE 				;if we do have a collision, update state to paused and 
				;update status for game_info output	;send this info out to the game_info register
				FETCH	s3,		SP_GAME_INFO
				LOAD 	s4,		FB
				AND		s3,		s4				;update status to be paused
				STORE	s3,		SP_GAME_INFO
				LOAD	s5,		FF				;output pattern for leds
				OUTPUT	s5,		PA_LEDS
				RETURN
				
				
chk_up_btn:
;check if player wants to pause
				;output 
				
				FETCH	s2,		SP_BTN					;load saved debounce button
				AND		s2,		MSK_BTN_UP				;mask with up button
				COMPARE s2,		MSK_BTN_UP
				JUMP NZ, 	chk_no_btn					;go to next phase if no up button
				LOAD 	s3,		PAUSED_STATE			;else pause and send out that register
				STORE	s3,		STATE
                                ;change game_info to deliver paused state
				FETCH	s3,		SP_GAME_INFO
				LOAD 	s4,		FB
				AND		s3,		s4				;update status to be paused
				STORE	s3,		SP_GAME_INFO
				LOAD	s5,		FF				;output pattern for leds
				OUTPUT	s5,		PA_LEDS
				RETURN

				
chk_no_btn:
;see if no buttons have been pressed - if so, check the state, and if in active, update everything
;if paused, just return
				
				FETCH	s2,		SP_BTN					;grab debounced values
				AND		s2,		MSK_BTN_NONE	
                                LOAD    s3,             00
				COMPARE s2,		s3                    ;check if any buttons pressed
				JUMP NZ, 	chk_down_btn				;if a button is pressed, check the next
				;FETCH	s4,		STATE					;if not, check the state
				;COMPARE	s4,		PAUSED_STATE			;if we're in the paused state
				;RETURN	Z							;return and don't update anything since paused
				LOAD	s3,		SP_GAME_INFO		;if we're still going, change game_info vehicle value
				LOAD	s2,		FC				; if 0 btns, no veh movement, is 00, so mask to make last 2 LSB 00
				AND		s3,		s2				;if not paused, make sure next vehicle movement is straight
                                ;later - output 00 in LEDS 
				OUTPUT	s3,		PA_LEDS				;displays the game_info register values
				CALL active						;if no buttons are pressed but it's not paused, still update score and state
				RETURN

				
chk_down_btn:
;check if player wants to resume (if game is active and is pressed, nothing will change)
				CALL active					;we can also call active for everyone here since we know we're moving
				FETCH	s2,		SP_BTN				;get debounced values
				AND		s2,		MSK_BTN_DOWN				;mask with down button
				COMPARE s2,		MSK_BTN_DOWN				
				JUMP NZ, 	chk_left_btn					;if not down button, go to next test
				LOAD	s5,		00				;  Want to output values?  Should be none since resuming
				OUTPUT	s5,		PA_LEDS
				RETURN


chk_left_btn:
				FETCH	s2,		SP_BTN
				AND		s2,		MSK_BTN_LEFT
				COMPARE s2,		MSK_BTN_LEFT	;see if left button pressed
				JUMP	NZ,		chk_right_btn	;if not, check the right button
				;FETCH	s2,		SP_SPRITE_LOC
				;SUB		s2,		01					;x coordinate is 1 less now
				;STORE	s2, 	SP_SPRITE_LOC	; save value back
				FETCH	s3,		SP_GAME_INFO
				LOAD 	s4,		FE				;moving left value is 10
				AND		s3,		s4				;value to make LSB = 0
				LOAD	s4,		02				;value to make 2nd bit = 1
				OR		s3,		s4				;
				STORE	s3,		SP_GAME_INFO
				LOAD	s5,		E0				;output pattern for leds
				OUTPUT	s5,		PA_LEDS
				RETURN			

				
chk_right_btn:
				FETCH	s0,		SP_BTN
				AND		s0,		MSK_BTN_RIGHT
				COMPARE s0,		MSK_BTN_RIGHT
				RETURN	NZ,						;if the right button isn't pressed, we're done (should never happen unless reset?)
				;FETCH	s2, 	SP_SPRITE_LOC
				;ADD		s2,		01			;x coordinate is 1 more now
				;STORE	s2, 	SP_SPRITE_LOC	; save value back
				FETCH	s3,		SP_GAME_INFO
				LOAD 	s4,		FD				;moving right value is 01
				AND		s3,		s4				;value to make 2nd bit = 0
				LOAD	s4,		01				;value to make LSB = 1
				OR		s3,		s4				;
				STORE	s3,		SP_GAME_INFO
                                OUTPUT  s3,         PA_GAME_INFO
				;LOAD	s5,		07
                                LOAD    s5,             s3            ;output the game_info when turning right
				OUTPUT	s5,		PA_LEDS
				RETURN	


			
; ==================================================================================
; ============== Score keeping functions 	================
; ==================================================================================
				
display_score:		;take score from stored value and put in Dig0,1,2,3... for all of these
				FETCH	s2,		SP_CNT_0
				LOAD	Dig0,	s2
				FETCH	s2,		SP_CNT_1
				LOAD	Dig1,	s2
				FETCH	s2,		SP_CNT_2
				LOAD	Dig2,	s2
				FETCH	s2,		SP_CNT_3
				LOAD	Dig3,	s2
				RETURN

update_score:
				;calculate first digit
				FETCH	s2, 	SP_CNT_0
				ADD		s2,		01
				;LOAD	Dig0,	s2					
				;LOAD	s3,		Dig0				;s3 contains incremented value before mask, used for 2nd digit
				;AND		Dig0,	MSK_DECDIGIT		;put output value in Dig0 register, 0-9
				AND		s2,		MSK_HEXDIGIT
				;STORE	Dig0,	SP_CNT_0
				LOAD	s3,		s2
				STORE	s2,		SP_CNT_0
				LOAD	s4,		0A				;should work?				
				COMPARE	s4,		s3				;make sure register value isn't gone
								
				JUMP	Z,		score1			;if we should increment next digit, call function
				RETURN
				
score1:
				LOAD	s5,		00
				STORE	s5,		SP_CNT_0			;clear previous counter
				FETCH	s2, 	SP_CNT_1		
				ADD		s2,		01
				;LOAD	Dig1,	s2					
				;LOAD	s3,		Dig1				;s3 contains incremented value before mask, used for 2nd digit
				;AND		Dig1,	MSK_DECDIGIT		;put output value in Dig0 register, 0-9
				;STORE	Dig1,	SP_CNT_1
				AND		s2,		MSK_HEXDIGIT
				STORE	s2,		SP_CNT_1
				LOAD	s4,		0A				;should work?
				COMPARE	s4,		s2				;make sure register value isn't gone
				JUMP	Z,		score2			;if we should increment next digit, call function
				RETURN

score2:
				LOAD	s5,		00
				STORE	s5,		SP_CNT_1			;clear previous counter
				FETCH	s2, 	SP_CNT_2		
				ADD		s2,		01
				;LOAD	Dig2,	s2					
				;LOAD	s3,		Dig2				;s3 contains incremented value before mask, used for 2nd digit
				;AND		Dig2,	MSK_DECDIGIT		;put output value in Dig0 register, 0-9
				;STORE	Dig2,	SP_CNT_2
				AND		s2,		MSK_HEXDIGIT
				STORE	s2,		SP_CNT_2
				LOAD	s4,		0A				;should work?
				COMPARE	s4,		s2				;make sure register value isn't gone
				JUMP	Z,		score3			;if we should increment next digit, call function
				RETURN
				
score3:
				LOAD	s5,		00
				STORE	s5,		SP_CNT_2			;clear previous counter
				FETCH	s2, 	SP_CNT_3		
				ADD		s2,		01
				;LOAD	Dig3,	s2					
				;LOAD	s3,		Dig3				;s3 contains incremented value before mask, used for 2nd digit
				;AND		Dig3,	MSK_DECDIGIT		;put output value in Dig0 register, 0-9
				;STORE	Dig3,	SP_CNT_3
				AND		s2,		MSK_HEXDIGIT
				STORE	s2,		SP_CNT_3
				LOAD	s4,		0A				
				COMPARE	s4,		s2				
				JUMP	Z,		max_score
				RETURN

max_score:
			LOAD	s1,		09
			LOAD	Dig0,	s1
			LOAD	Dig1,	s1	
			LOAD	Dig2,	s1
			LOAD	Dig3,	s1
			LOAD	s2,		00
			STORE	s2,		SP_CNT_0
			STORE	s2,		SP_CNT_1
			STORE	s2,		SP_CNT_2
			STORE	s2,		SP_CNT_3		
			RETURN
			

				
; ==================================================================================
; ============== If the switch is up, display different options 	================
; Pushbuttons now have different options:
; Left/Right - Change Vehicle, 4 options
; Up - Change Background, 4 options
; Change difficulty, 2 options
; Change Number of tunnels.  Have 5 bits to work with
; ==================================================================================
;OUTPUT LEDS TO SAY WHICH LEVEL IT'S AT?



display_opts:		CALL	DEB_rdbtns					; Read the pushbuttons. buttons returned in s0
				LOAD	s1,	s0						;copy and store value
				STORE	s1,	SP_BTN2
				CALL	chk_veh_left
				CALL	chk_veh_right
				CALL	chk_background
				CALL	chk_level
				RETURN								
		
chk_veh_left:
				FETCH	s0,		SP_BTN2
				AND		s0,		MSK_BTN_LEFT				;mask with up button
				COMPARE s0,		MSK_BTN_LEFT
				RETURN NZ						;CALL OTHER CHECKS IF THIS ONE NOT PRESSED
				FETCH	s2,		SP_NUM_VEH
				SUB		s2,		01
				AND		s2,		MSK_NUM_VEH
				LOAD	Dig1,	s2				;load index of vehicles to display
						; SHOULD BE 4 VEH TOTAL
	;NOT WORKING YET, NEED TO OR, AND WITH NUMBER SOMEHOW?  MUST BE A BETTER WAY
				;FETCH	s3,		SP_GAME_INFO
				;LOAD 	s4,		FE				;icon selection is bits [6:5]
				;AND		s3,		s4				;value to make LSB = 0
				;LOAD	s4,		02				;value to make 2nd bit = 1
				;OR		s3,		s4				;
				;STORE	s3,		SP_GAME_INFO
				STORE	s2,		SP_NUM_VEH
				RETURN
chk_veh_right:				
				;NOW check if the right button was hit and decrement if so
				
				FETCH	s0,		SP_BTN2
				AND		s0,		MSK_BTN_RIGHT				;mask with up button
				COMPARE s0,		MSK_BTN_RIGHT
				RETURN NZ						;CALL OTHER CHECKS IF THIS ONE NOT PRESSED
				FETCH	s2,		SP_NUM_VEH
				ADD		s2,		01
				AND		s2,		MSK_NUM_VEH
				LOAD	Dig1,	s2				;load index of vehicles to display
						; SHOULD BE 4 VEH TOTAL
	;NOT WORKING YET, NEED TO OR, AND WITH NUMBER SOMEHOW?  MUST BE A BETTER WAY
				;FETCH	s3,		SP_GAME_INFO
				;LOAD 	s4,		FE				;icon selection is bits [6:5]
				;AND		s3,		s4				;value to make LSB = 0
				;LOAD	s4,		02				;value to make 2nd bit = 1
				;OR		s3,		s4				;
				;STORE	s3,		SP_GAME_INFO
				STORE	s2,		SP_NUM_VEH			
				RETURN


				
chk_background:
				FETCH	s0,		SP_BTN2
				AND		s0,		MSK_BTN_UP				;mask with up button
				COMPARE s0,		MSK_BTN_UP
				RETURN NZ						;CALL OTHER CHECKS IF THIS ONE NOT PRESSED
				FETCH	s2,		SP_NUM_BKGRND
				ADD		s2,		01
				AND		s2,		MSK_NUM_BKGRND
				LOAD	Dig2,	s2
						; SHOULD BE 4 backgrounds
				;XOR WITH GAME_INFO
				STORE	s2,		SP_NUM_BKGRND
				RETURN

chk_level:		
				FETCH	s0,		SP_BTN2
				AND		s0,		MSK_BTN_DOWN				;mask with up button
				COMPARE s0,		MSK_BTN_DOWN
				RETURN NZ						;CALL OTHER CHECKS IF THIS ONE NOT PRESSED
				FETCH	s2,		SP_NUM_LEV
				ADD		s2,		01
				AND		s2,		MSK_NUM_LEV
				LOAD	Dig0,	s2
						; SHOULD BE 2 LEVELS
				;XOR WITH GAME_INFO
				STORE	s2,		SP_NUM_LEV
				RETURN


			
;*************************
; Nexys3 I/O Functions
;*************************

;---------------------
; DEB_rdbtns() - Reads the debounced pushbuttons
;
; Returns the 5 pushbuttons. The buttons are returned as follows
; (assuming the inputs to the I/O interface matches this order)
; example:
;    bit  7    6      5        4        3        2        1         0
;         r    r   	  r    btn_cntr  btn_left  btn_up  btn_right  btn_down
;
; where r = reserved. A value of 1 indicates that the button is pressed.  
; A 0 indicates that the button is not pressed.
;
; Registers used s0
;---------------------
DEB_rdbtns:		INPUT	s0,		PA_PBTNS			; read the buttons
				AND		s0,		MSK_ALLBTNS			; mask out unused bits
				RETURN								; and return
				
				
;---------------------
; DEB_rdsw() - Reads the debounced switches
;
; Returns the four switches in s0. The buttons are returned as follows
; (assuming the inputs match the order in the pb_rot_7Segemu
; example:
;    bit  7    6    5   4    3    2    1    0
;        sw7  sw6  sw5 sw4  sw3  sw2  sw1  sw0
;
; where r = reserved, sw7 is the leftmost switch and sw0 is the rightmost
; switch. A value of 1 indicates that the switch is on (up).  A 0 indicates that
; the switch is off (down).
;
; Registers used s0
;---------------------
DEB_rdsw:		INPUT	s0,		PA_SLSWTCH			; read the slide switches
				AND		s0,		MSK_ALLSW			; mask out unused bits
				RETURN								; and return				

								
;---------------------
; LED_wrleds() - Write the LEDs
;
; Writes the pattern in s1 to the LEDs
;
; Registers used s0, s1
;---------------------
LED_wrleds:		LOAD	s0,		s1					; Copy LEDs to s0 to preserve them
				AND		s0,		MSK_LEDS			; mask out unused bits
				OUTPUT	s0,		PA_LEDS				; and write pattern to the LEDs	
				RETURN								; and return						
				
				
;---------------------
; SS_wrdigx() - Write a digit to the display
;
; Writes the value specified in s1 to the digit number
; in s2.  The digit number must be 0, 1, 2, or 3.  All
; others numbers will be rejected.  
;
; Registers used s0, s1, s2, s3
;---------------------
SS_wrdigx:		COMPARE	s2,		04					; check if the digit number is in range
				RETURN	NC							; C=0 says s1 >= 04 - out of range so return
				LOAD	s0,		PA_DIG0				; calculate port address by starting with port address for digit 0
				SUB		s0,		s2					; next subtract out the digit number.  This will give the port address
													; for the selected digit.  Cool - it works because the port
													; addresses for the digits are consecutive starting with digit 3
				LOAD	s3,		s1					; Copy the value to s3 so we can leave it unchanged
				AND		s3,		MSK_CCODE			; mask out unused character code bits		
				OUTPUT	s3,		(s0)				; abd write the digit to the display at the port pointed to by s0
				RETURN
				
				
;---------------------
; SS_wrdpts() - Write the decimal points to the display
;
; Writes the decimal points specified in s1 to the display.
; The decimal point register is formatted as follows:
;    bit   7    6    5    4     3     2     1     0
;          r    r    r    r    dp3   dp2   dp1   dp0
;
; where r = reserved, dp3 (leftmost), dp2, dp1 dp0 (rightmost) = 1
; lights the decimal point. A 0 in the position turns off the decimal point
;
; Registers used s0,s1
;---------------------
SS_wrdpts:		LOAD	s0,		s1					; Copy the decimal points to s0 to leave s1 unchanged
				AND		s0,		MSK_DECPTS			; and mask out the unused bits
				OUTPUT	s0,		PA_DP				; write the decimal points to the display
				RETURN
				


;---------------------
; SS_wrall() - Write all of the digits and decimal points to the display
;
; Writes all of the digits and decimal points to the display.  The values of the
; digits and decimal point will be taken from 5 consecutive locations in the
; PicoBlaze scratchpad RAM starting with the byte pointed to by s1.
; Digits are arranged as follows:
;	(s1)	Dig0
;	(s1+1)	Dig1
;	(s1+2)	Dig2
;	(s1+3)	Dig3
;	(s1+4)	Decimal points {dp3, dp2, dp1, dp0}
;
; Registers used s0, s1, s2, s3, s4
;---------------------
SS_wrall:		LOAD	s4,		s1					; Copy the SP RAM pointer to s4 to preserve SP RAM offset
				FETCH	s1,		(s4)				; get digit 0. s4 points to it
				LOAD	s2,		00					; tell SS_wrdigx to write digit 0
				CALL	SS_wrdigx					; and write the character
													;
				ADD		s4,		01					; point to digit 1
				FETCH	s1,		(s4)				; fetch if from the SP RAM
				LOAD	s2,		01					; tell SS_wrdigx to write digit 1
				CALL	SS_wrdigx					; and write the character
													;
				ADD		s4,		01					; point to digit 2
				FETCH	s1,		(s4)				; fetch if from the SP RAM
				LOAD	s2,		02					; tell SS_wrdigx to write digit 2
				CALL	SS_wrdigx					; and write the character
													;
				ADD		s4,		01					; point to digit 3
				FETCH	s1,		(s4)				; fetch if from the SP RAM
				LOAD	s2,		03					; tell SS_wrdigx to write digit 3
				CALL	SS_wrdigx					; and write the character
													;
				ADD		s4,		01					; point to decimal points
				FETCH	s1,		(s4)				; and fetch vector from the SP RAM
				CALL	SS_wrdpts					; write the decimal points to display
				RETURN																			
				
				
									
; =========================
; === Interrupt Handler ===
; =========================
ADDRESS 300
isr:			STORE	s6,		SP_TEMP1			; 	save s6, s5
				STORE	s5,		SP_TEMP2			;
				FETCH	s6,		SP_SEM				; 	fetch the semaphore
				TEST	s6,		FF					;	if (SP_SEM == 0) {  // update system register values
				JUMP	NZ,		isr_L0				; -- ZF == 0 says semaphore != 0
													;		// no - get the data from the rojobot emulator
				INPUT	LocX,	PA_LOCX				;		get Rojobot X-coordinate 
				INPUT	LocY,	PA_LOCY				;		get Rojobot Y-coordinate
				;INPUT	Botinf,	PA_BOTINFO			;		get Rojobot Movement and Orientation
				INPUT 	Colinf,	PA_COLLINFO
				INPUT	Sensor,	PA_SENSORS			;		get Rojobot Sensors
				INPUT	s5,		PA_LMDIST			;		get left and right motor distance counters
				STORE	s5,		SP_LMDIST			;		not displayed in this program but let's stash them
				INPUT	s5,		PA_RMDIST			;		in case we decide we need them in lab 2 or 3
				STORE	s5,		SP_RMDIST			;				  
				ADD		s6,		01					;		increment semaphore
				STORE	s6,		SP_SEM				;	}  // update system register values
isr_L0:			FETCH	s6,		SP_OLDDP			;	toggle  decimal point 0 (rightmost)
				XOR		s6,		01					;
				OUTPUT	s6,		PA_DP				;	write directly to decpt port to avoid having to save s1
				STORE	s6,		SP_OLDDP			;				
				FETCH	s5,		SP_TEMP1			; 	restore s6, s5
				FETCH	s6,		SP_TEMP2			;
				RETURNI	ENABLE					;	and return from interrupt			

; ========================
; === Interrupt vector ===
; ========================
ADDRESS 3FF
intvect:		JUMP	isr							; jump to interrupt service routine
				
					
